# RNA Dizileme Veri analizi


## Veri yükleme

Öncelikle verileri yükleyelim. İlk olarak Drosophila canlısından elde edilen RNA sayı matrisini yükleyelim:

```{r}
counts <- read.table(file = "https://raw.githubusercontent.com/emrahkirdok/ybva/main/data/counts_drosophila.txt", header = T, sep = " ")

counts <- as.matrix(counts)
```

Şimdi de örneklerin sahip oldukları metadata bilgilerini yükleyelim:

```{r}
metadata <- read.table(file = "https://raw.githubusercontent.com/emrahkirdok/ybva/main/data/sample_info_drosophila.txt", header = T)
```

RNASeq matrisi boyutuna bakalım:

```{r}
dim(counts)
```

Burada Sütun isimlerinin sırasına dikkat edelim:

```{r}
colnames(counts)
```

Örnek metaverisine baktığımızda, örneklerin sahip olukları metaveri bilgilerini görebilirz. Burada iki tane koşul bulunmakta: `kontrol` ve `uygulama`

Ayrıca, RNA sayı matrisindeki örnek sırası ile, bu veri çerçevesinde bulunan örneklerin sıralarının aynı olduğuna dikkat edelim:

```{r}
metadata
```

## Veri normalizasyonu

Kutu grafiği ile elimizdeki veriye bakalım:

```{r}
boxplot(counts)
```

Şimdi de verinin histogramını oluşturalım:

```{r}
hist(counts)
```

Dikkat edersek veri karşılaştırılabilir değil. Öncelikle normalizasyon ile veriyi karşılaştırılabilir hale getirelim. Bunun için kullanılacak tekniklerden bir tanesi `log2` normalizasyonu:

```{r}
counts <- log2(counts)
```

Kutu grafiği ile veriyi inceleyelim:

```{r}
boxplot(counts)
```

Şimdi de histogram ile:

```{r}
hist(counts)
```

Dikkat ederseniz, artık veri normalize edildi.

Son olarak dendrogram oluşturup, elimizdeki koşulların birlikte gruplanıp gruplanmadıklarına bakalım:

```{r}
plot(hclust(dist(t(counts))), labels = metadata$Grup)
```

## Gen anlatım analizi

İlk olarak birinci geni inceleyelim. Acana bu gen anlatımında anlamlı bir farklılık var mı?

```{r}
kontrol <- counts[1,metadata$Grup=="Kontrol"]
uygulama <- counts[1,metadata$Grup=="Uygulama"]

test <- t.test(x = kontrol, y = uygulama)
```

Peki bu genin anlatımında görülen değişim anlamlı mı? Bunu `0.05` anlamlılık seviyesine göre inceleyelim:

```{r}
test$p.value < 0.05
```

Evet, bu gen anlamı bir şekilde değişmiş. Şimdi de bu genin grafiğine bakalım:

```{r}
boxplot(counts[1,]~metadata$Grup)
```

Peki ikinci gende durum nedir?

```{r}
kontrol <- counts[2, metadata$Grup=="Kontrol"]
uygulama <- counts[2, metadata$Grup=="Uygulama"]

test <- t.test(x = kontrol, y = uygulama)
```

Peki bu genin anlatımında görülen değişim anlamlı mı? Bunu `0.05` anlamlılık seviyesine göre inceleyelim:

```{r}
test$p.value < 0.05
```

Bu genin anlatımı anlamlı bir şekilde değişmemiş. Şimdi de bu genin grafiğine bakalım:

```{r}
boxplot(counts[2,]~metadata$Grup)
```

Şimdi bütün genler için inceleme yapalım:

```{r}
# once p degerlerini toplayacagimiz bir boş vektor oluşturalim

p.value <- rep(0, nrow(counts))

for (i in 1:nrow(counts)){
  kontrol <- counts[i, metadata$Grup=="Kontrol"]
  uygulama <- counts[i, metadata$Grup=="Uygulama"]

  test <- t.test(x = kontrol, y = uygulama)
  p.value[i] <- test$p.value
}
```

Kaç tane gen anlamlı değişmiş? (0.05'e göre):

```{r}
sum(p.value < 0.05, na.rm = TRUE)
```