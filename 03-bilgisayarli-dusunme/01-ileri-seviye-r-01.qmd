# Kontrol yapıları 

Bu kısımda ileri seviye R kullanımına başlayacağız. Veri Analizi dersi kapsamında daha çok R ile veri analizi üzerine çalışmalar yapıldı. Bu kısımda ise R ile programlama adımlarını incelemeye başlayacağız.

Kontrol yapıları gerçekleştireceğiniz analiz adımlarında farklı aşamaların çalıştırılması ve veri analizi akışının kontrol edilmesini sağlamaktadır. Bu sayede karmaşık veri setlerinde farklı analiz adımları gerçekleştirebiliriz.

Küçük bir örnekle bunu açıklamaya çalışalım. Elimizde aşağıdaki gibi bir vektör olsun:

```{r}
yaprak_uzunlugu <- c(2.3, 3.4, 4.5, 1.2, 3.4, 
                    3, 1.8, 6.3, 2.1, 5)
```

Bu vektörde bulunan her elemana belirli bir fonksiyonu uygulamak istediğimizi düşünelim. Şu ana kadar öğrendiğimiz bilgilerle, bu vektör içerisindeki elemanları manuel olarak seçerek bu işlemleri gerçekleştirebiliyoruz.

Ancak R üzerinde kullanacağımız döngü yapısı (`for` döngüsü), bize bu vektördeki her elemana erişip, o elemanla işlem yapma şansı sağlamaktadır.

Peki, 5'den büyük ve küçük olan elemanlara farklı işlemler yapmak istersek? O zaman da `if-else` kontrol yapısı bize yardımcı olacaktır. Bu sayede bir elemanın 5'den büyük veya küçük olma koşulunu inceleyerek, ona göre işlemler gerçekleştirebilriz.

## Döngüler (`for`)

Veri ile çalışırken çoğunlukla belirli fonksiyonları art arda, farklı verilere uygulamamız gerekir. Dolayısıyla aynı işi döngü halinde yapmalıyız.

Basit bir örnek verelim. Önce bir sayı vektörü oluşturalım:

```{r}
yaprak_uzunlugu <- c(2.3, 3.4, 4.5, 1.2, 3.4, 
                    3, 1.8, 6.3, 2.1, 5)
```

Bu vektörün her elemanına 5 ekleyerek çıkan sonucu ikiye bölmek istediğimiz düşünelim. Çok mantıksız bir örnek olabilir ama olayın işleyişini kavramamıza yardımcı olacaktır.

Önce ilk eleman için yapalım. Vektörler ve vektörlerde indisleme konusunu hatırlamak isterseniz @sec-vektorler'i tekrar gözden geçirebilirsiniz.

```{r}
(yaprak_uzunlugu[1]+5)/2
```

Şimdi ise ikinci eleman için bunu yapalım:

```{r}
(yaprak_uzunlugu[2]+5)/2
```

Dikkat ederseniz sadece kullandığımız vektördeki indis değişiyor. Dolayısıyla `for` döngüsü kullanırsak bu işi daha kolay bir şekilde halledebiliriz.

Öncelikle `for` döngüsünün genel yapısına bakalım:

```r
for ( ÇALIŞILACAK ELEMAN KÜMESİ ){
    YAPILACAK İŞ
}
```

Burada DÖNGÜ ile belirtilen kısma, hangi elemanlardan bir döngü oluşturacağımızı yazıyoruz. `for` döngüsü bize o elemanları tek tek seçme şansı veriyor. Daha sonra süslü parantezler içerisindeli **YAPILACAK İŞ** adımı çalıştırılıyor.

Ancak bu yapıyı yukarıdaki gibi kullanmalıyız.

Şimdi döngümüzü yazalım:

```{r}
for (i in 1:length(yaprak_uzunlugu)){
    sonuc <- (yaprak_uzunlugu[i]+5)/2
    print(sonuc)
}
```

Bu işlemi yakından inceleyelim. Önce bir sayı vektörü oluşturuyoruz. Ancak bu sayı vektörünü kullanacağımız vektörün uzunluğuna göre belirliyoruz. Yani elimizde 1'den `r length(yaprak_uzunlugu)`'a kadar bir sayı dizisi oluştuyor. 

`i in 1:length(yaprak_uzunlugu)` cümlesini kullandığımızda R bize elimizdeki eleman kümesini tek tek seçme şansı veriyor.

```{r}
1:length(yaprak_uzunlugu)
```

For döngüsü ise `i` adından bir değişken oluşturuyor. Önce `i` değişkenine birinci eleman olan 1 değerini atıyor ve belirtilen işlemi yapıyor.

O işlem bitince, `i` değerine ikinci elemanı atanıyor ve bu sefer `i <- 2` için işlemi gerçekleştiriyor.

Bu işlem oluşturduğumuz sayı vektörü bitene kadar devam ediyor.

Bir önceki örnekte vektördeki eleman sırasını kullandık. İstersek doğrudan vektördeki elemanları da kullanabiliriz. Bunun için ise  `i` yerine `eleman` isimli bir değişken oluşturalım: 

```{r}
for (eleman in yaprak_uzunlugu){
    sonuc <- (eleman+5)/2
    print(sonuc)
}
```

Gördüğünüz iki `for` döngüsü de aynı işi yapmaktadır. İlk döngüde Bunu şu şekile görselleştirebiliriz (@fig-for-loop).

```{dot}
//| label: fig-for-loop
//| fig-cap: "`for` döngüsü hakkındaki diyagram"

digraph for{
    ilk [label = "Birinci elemanı\nseç", shape = box];
    son [label = "Son eleman mı?", shape = diamond];
    devam [label = "Sonraki elemana geç", shape = box];
    islem [label = "İstenen işlemi gerçekleştir"];
    sonlandır [label = "Döngüyü sonlandır", shape = box];
    {rank = same; ilk; devam}
    ilk -> islem -> son;
    son -> devam [label = "FALSE"];
    devam -> islem;
    son -> sonlandır [label = "TRUE"];
}

```

## Kontrol yapısı (`if-else`)

Eğer yapacağımız analiz adımında veriye bağlı olarak koşullu bir analiz gerçekleştirilecekse `if-else` yapısını kullanıyoruz. 

Mesela elimizde bir sayımız olsun. Eğer bu sayı 5'ten büyük veya eşit ise ekrana "Bu sayı 5'den büyük veya eşittir" yazsın. Eğer 5'ten küçük ise "Bu sayı 5'den küçüktür" yazsın.

@fig-if-else-1 bize bu işlemi şematize edecektir.

```{dot}
//| label: fig-if-else-1
//| fig-cap: "`if-else` döngüsü hakkındaki diyagram"

digraph g {
    sayi [label = "Sayı", shape = box];
    kontrol [label = "5'den büyük \n veya \n 5'e eşit", shape = diamond];
    ilk [label = "Ekrana yazdır:\n5'den büyük \n veya \n 5'e eşit"];
    ikinci [label = "Ekrana yazdır:\n5'den küçük"];
    sonlandir [label = "İşlemi sonlandır", shape = box];
    sayi -> kontrol;
    kontrol -> ilk [label = "TRUE"];
    kontrol -> ikinci [label = "FALSE"];
    {rank = same; kontrol; ilk}
    {ilk; ikinci} -> sonlandir;
}
```

İlk olarak bir sayı belirleyelim:

```{r}
sayi <- 12
```

İlk koşulu çalıştıralım:

```{r}
sayi >= 5
```

Bu işlemin sonucunda TRUE değeri geri döndürüldü. Burada bir karşılaştırma işlemi yaptık. Yani elimizdeki sayı 5'e eşit veya 5'ten büyük. Ama asla 5'ten küçük değil.

Şimdi `if-else` yapısına bakalım:

```r
if ( KOŞUL ){
    KOŞUL DOĞRU İSE BURAYI ÇALIŞTIR
} else {
    KOŞUL DOĞRU DEĞİL İSE BURAYI ÇALIŞTIR
}
```

İlk önce bir koşul belirliyoruz (sayının 5'e eşit veya 5'ten büyük olması). Eğer bu koşul doğru ise ilk yapı çalışıyor, eğer bu koşul doğru değil ise ikinci satır çalışıyor.

Şimdi bu örnek ile gerçekten çalışabilir bir kod yazalım:

```{r}
sayi <- 12

if (sayi >= 5) {
  print("bu sayi bese esit veya besten buyuktur")
} else{
  print("bu sayi besten kucuktur")
}
```

## Farklı yapıları birleştirelim

Şimdi tekrar yaprak uzunluğu örneğimize gelelim ve bu iki yapıyı birleştirelim. Bu sefer her elemana farklı işlemler uygulamaya çalışalım.

```{r}
yaprak_uzunlugu <- c(2.3, 3.4, 4.5, 1.2, 3.4, 
                    3, 1.8, 6.3, 2.1, 5)
```

Elimizde artık iki tane koşul olsun:

+ Eğer eleman 5'den büyük veya eşitse elemana 5 ekle ve ikiye böl.
+ Eğer eleman 5'den küçükse elemana 10 ekle ve 3'e böl.

Yine örneğimiz biraz rastgele oldu. Böyle bir senaryo için `if-else` yapısı kullanmalıyız. Önce cevabı görelim, daha sonra adım adım inceleyelim:

```{r}
for (eleman in yaprak_uzunlugu){
    if (eleman >= 5){
        sonuc <- (eleman+5)/2
        cat("yaprak uzunlugu 5'den buyuk veya esit, ilk formul uygulandı:", sonuc, "\n")
    } else {
        sonuc <- (eleman+10)/3
        cat("yaprak uzunlugu 5'den kucuk, ikinci formul uygulandı:", sonuc, "\n")
    }
}
```

Şimdi bu yapıyı daha iyi anlamak için görselleşirelim (@fig-all-loop):

```{dot}
//| label: fig-all-loop
//| fig-cap: "İki kontrol yapısını da birleştirmek"
digraph g{
    eleman [label = "Birinci elemanı seç", shape = box];
    kontrol [label = "5'den büyük \n veya \n 5'e eşit mi?", shape = diamond];
    
    son [label = "Son i'yi alana kadar devam et"];
    
    ilk [label = "Birinci formülü uygula\nSonucu ekrana yazdır"];
    ikinci [label = "İkinci formülü uygula\nSonucu ekrana yazdır"];
    
    son [label = "Son eleman mı?", shape = diamond];
    devam [label = "Sonraki elemanı seç", shape = box]
    
    "Başla" -> eleman -> kontrol;

    kontrol -> ilk [label = "TRUE"];
    kontrol -> ikinci [label = "FALSE"];

    {ilk; ikinci} -> son;
    son -> devam [label = "FALSE"];
    devam -> kontrol;

    son -> "Döngüyü sonlandır." [label = "TRUE"]
    {rank = same; eleman; devam}
    {rank = same; kontrol; ilk};
}
```

## Ödev

Burada öğrendiklerimizi pekiştirmek için @sec-odev-dna-islemler'de bulunan ödeve bakalım ve haftaya kadar cevaplayalım.