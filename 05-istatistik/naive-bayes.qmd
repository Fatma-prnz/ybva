# Naive-Bayes ile Meme Kanser Veri Analizi

İlk olarak aşağıda bulunan paketleri kurmanız gerekidir:

```{r eval = FALSE}
install.packages("psych")
install.packages("corrplot")
install.packages("ggplot2")
install.packages("caret")
install.packages("ggpubr")
install.packages("klaR")
```

Daha sonra bu paketleri yükleyelim:

```{r}
library(psych)
library(corrplot)
library(ggplot2)
library(caret)
library(ggpubr)
library(klaR)
```

Bu çalışmada kullanılan tutorial:

[https://www.kaggle.com/code/lbronchal/breast-cancer-dataset-analysis](https://www.kaggle.com/code/lbronchal/breast-cancer-dataset-analysis)

Veri setimizi alalım (Siz buraya kendi dosya yolunuzu yazacaksınız). Veri seti link: <https://www.kaggle.com/code/lbronchal/breast-cancer-dataset-analysis/input>

İlk olarak verimizi yükleyelim:

```{r}
bc_data <- read.csv("https://raw.githubusercontent.com/emrahkirdok/ybva/main/05-istatistik/data.csv")
```

Teşhisi faktör olarak düzenleyelim (M:malign tümör, B:benign tümör) ve veri setini inceleyelim:

```{r}
bc_data$diagnosis <- as.factor(bc_data$diagnosis)
bc_data[,33] <- NULL
summary(bc_data)
```

Teşhis bilgisine bakalım:

```{r}
prop.table(table(bc_data$diagnosis))
```

Veri setini inceleyelim:

```{r}
describe(bc_data)
```

Korelasyon matrixi ile ilişkili olan verileri inceleyelim:

```{r}
corr_mat <- cor(bc_data[,3:ncol(bc_data)])
corrplot(corr_mat, order = "hclust", tl.cex = 1, addrect = 8)
```

Etkenlerden birini seçip plotlayalım:

```{r}
ggplot(bc_data, aes(x=texture_mean)) + geom_density(alpha=0.5, aes(fill=diagnosis)) + labs(title="Texture distribution by outcome")
```

Şimdi yavaşça işin makine öğrenmesi kısmına başlıyoruz. Burada veri setimiz rastgele olarak iki parçaya bölünüyor: Makineye "öğreten" training set ve bunu test eden testing set.

```{r}
set.seed(1234)
data_index <- createDataPartition(bc_data$diagnosis, p=0.7, list = FALSE)
train_data <- bc_data[data_index, -1]
test_data <- bc_data[-data_index, -1]
```

şimdi de bu bölünen kısımların oranlarına bakalım:

Veri setimiz:

```{r}
prop.table(table(bc_data$diagnosis)) * 100
```

Training setimiz:

```{r}
prop.table(table(train_data$diagnosis)) * 100
```

Testing setimiz:

```{r}
prop.table(table(test_data$diagnosis)) * 100
```

Verilerimizi görselleştirelim:

```{r}
pca_res <- prcomp(bc_data[,3:ncol(bc_data)], center = TRUE, scale = TRUE)
plot(pca_res, type="l")
summary(pca_res)
```

Teşhis bilgisinin temel bileşen analizini yapalım:

```{r}
pca_df <- as.data.frame(pca_res$x)
ggplot(pca_df, aes(x=PC1, y=PC2, col=bc_data$diagnosis)) + geom_point(alpha=0.5)
```

Teşhis bilgisi için her bileşeni ayrıca inceleyelim:

```{r}
g_pc1 <- ggplot(pca_df, aes(x=PC1, fill=bc_data$diagnosis)) + geom_density(alpha=0.25)  
g_pc2 <- ggplot(pca_df, aes(x=PC2, fill=bc_data$diagnosis)) + geom_density(alpha=0.25)  
ggarrange(g_pc1, g_pc2, ncol=2, common.legend = T)
```

Modeli oluşturalım ve görüntüleyelim:

```{r warning = FALSE}
fitControl <- trainControl(method="cv", number = 5, preProcOptions = list(thresh = 0.99), classProbs = TRUE, summaryFunction = twoClassSummary)

model_nb <- train(diagnosis~., train_data, method="nb", metric="ROC", preProcess=c('center', 'scale'), trace=FALSE, trControl=fitControl)
```

Modeli test edelim ve inceleyelim (bunu aslında yukarıda da yaptık)

```{r warning = FALSE}
Predict <- predict(model_nb,newdata = test_data)
confusionMatrix(Predict, test_data$diagnosis)
```

Her tahmin yürütücü değişkenin outcome/çıktı üzerindeki etkilerini kıyaslayalım:

```{r}
X <- varImp(model_nb)
plot(X)
```

Yorum artık sizde, yukarıdaki grafiğe bakarak bir kişiye meme kanseri teşhisi konmasındaki en önemli etkenler hangileri olarak görünüyor?