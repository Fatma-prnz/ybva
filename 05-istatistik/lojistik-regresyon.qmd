# Lojistik Regresyon

Bu çalışmada, programda mevcut olan Smarket veri seti (Borsa ile alakalı veriler bulunmaktadır.) üzerinden lojistik regresyon testi gerçekleştirilmiştir. Mevcut borsa verileri kullanılarak model oluşturulup tahminler yapılacaktır ve bu tahminlerin güvenilirliği test edilecektir.

Öncelikle veri setinin olduğu kütüphaneyi çağıralım:

```{r}
library(ISLR2)
```

Smarket veri setini inceleyelim ve veri setini daha rahat çalışabilmek adına attach fonksiyonu ile R çevresine bağlayalım:

```{r}
colnames(Smarket)

dim(Smarket)

summary(Smarket)

attach(Smarket)
```

Burada `attach` fonksiyonu ile verimizi R çevresine bağlayabiliyoruz. Bu sayede veri çerçevesi içindeki sütun isimlerine doğrudan erişebiliriz.


+ `Year` Ölçümlerin alındığı yıl değişkeni
+ `Lag1` Bir gün önce borsa kapanma fiyatı
+ `Lag2` İki gün önceki borsa kapanma fiyatı
+ `Lag3` Üç gün önceki borsa kapanma fiyatı
+ `Lag4` Dört gün önceki borsa kapanma fiyatı
+ `Lag5` Beş gün önceki borsa kapanma fiyatı
+ `Volume` Borsanın o günkü işlem hacmi
+ `Today` O gün borsa kapanma fiyatı
+ `Direction` Bir önceki güne göre borsa yüksek mi yoksa düşük mü kapattı
    + `Up`
    + `Down`

Bu modelleme çalışmasındaki amacımız borsanın o günkü seyrini (`Direction` değişkeni), son beş gün boyunca borsa kapanışı ve o günkü alış satış hacmini kullanarak tahmin etmeye çalışıyoruz.

Verilerle bir model oluşturalım. modeli setteki Directionc verisine göre kurup modelin özetini inceleyelim; modele, modeli tanımlayacak bir isim atayarak glm fonksiyonu ile oluşturduk.

```{r}
glm.fits <- glm(data = Smarket, Direction~Lag1 + Lag2 +Lag3+ Lag4+ Lag5+ Volume, family = binomial)
summary(glm.fits)
```

Predict fonksiyonu ile modelimizin ilk 10 parametresini tahmin edelim:

```{r}
predict.glm(glm.fits, type = "response")[1:10]
```

Tahminleri yeni bir veri içine aktaralım, bu şekilde yeni verimizle sadece tahmin üzerinden işlem yapabiliriz.

Öncelikle tahmin ettiğimiz Direction verilerinin olasılık değerlerini alalım:

```{r}
glm_prob <- predict.glm(glm.fits, type = "response")
```

Yeni oluşturduğumuz tahmin veri setinin ilk 6 elemanını inceleyelim:

```{r}
head(glm_prob)
```

Ve tahmin veri setimizin histogramını oluşturduktan sonra tahmin veri seti için olasılık veri seti oluşturalım: 

```{r}
hist(glm_prob)
```

Sadece histograma baktığımızda tahmin verilerimizin bir bölgede gruplandığını görebiliriz. Bu bölgeyi sınır noktası olarak kabul ederek çalışmayı 1-0 moduna indirgeyebiliriz. Bu şekilde pozitif ve negatif sonuçlar alabiliriz. 

`sum` fonksiyonu ile 0.5 olarak kabul ettiğimiz ayrımın altında ve üstünde kalan değerlerin sayısını inceleyelim. Bunların hepsi toplandığında dim fonksiyonu ile incelediğimiz veri seti boyutunu elde etmemiz gerekir. 

Kaç tane tahmin olaslığı 0.5'den büyük?

```{r}
sum(glm_prob > 0.5)
```

Kaç tanesi 0.5'den küçük?

```{r}
sum(glm_prob < 0.5)
```

Şimdi aynı histogramın 0.5 değerini çizgi ile gösteren versiyonunu oluşturalım:

```{r}
hist(glm_prob)

abline(v=0.5, col="red", lwd=10)
```

Şimdi bu değerleri *Aşağı (Down)* ve *Yukarı (Up)* olarak tanımlayalım.

```{r}

glm_pred<- rep("Down", 1250)

glm_pred[glm_prob> 0.5]  <- "up"

```

Şimdi bu tanımlanan değerlerin table fonksiyonu ile frekans tablosunu oluşturup sağlamasını yapalım: 

```{r}
table(glm_pred)
```

Veri seti içindeki herhangi bir verinin aşağı ve yukarı olarak nasıl gösterilebileceğine bakalım, burada Direction verisinin ilk 5 satırı incelenmiştir. Down olarak gösterilenler 0.5'ten küçük, up olarak gösterilenler ise 0.5'ten büyük olan değerlerdir.

Peki, gerçek değerlerimiz nedir?

```{r}
Smarket$Direction[1:5]
```

Şimdi ise, hem gerçek hem de tahmin edilmiş değerlerden bir karmaşa matrisi oluşturalım:

```{r}
table(Smarket$Direction, glm_pred)
```

Karmaşa matrisi, bir modelin performansını ölçmek için kullanabikeceğiniz bir frekans tablosu olarak tanımlanabilir.

Az önceki tabloyu oluşturmak için; gerçek değerleri, tahmin edilen değerlerle karşılaştırdık. Basit olsun diye, 1 ve 0 olarak iki durumumuz olsun.

+ Gerçek değer 1, tahmin edilen değer 1: *Gerçek Pozitif, True Pozitif* $TP$
+ Gerçek değer 1, tahmin edilen değer 0: *Yanlış Negatif, False Negative* $FN$
+ Gerçek değer 0, tahmin edilen değer 0:  *Gerçek Negatif True Negative* $TN$
+ Gerçek değer 0, tahmin edilen değer 1:  *Yanlış Pozitif False Positive* $FP$

Toplam örneklem sayımız ise: $N = TP + TN + TN + FP$

Bu değerlerin hepsini aşağıdaki şekilde özetleyebiliriz:

```{r}
knitr::include_graphics(path = "../images/conf_tbl.png")
```



Bu veri setinde borsa değerleri vardı ve borsadaki düşüşleri ve yükselişleri temsil etmek adına ölçümlerimizi up ve down olarak tanımladık. 

Pozitif ve negatiften (1-0) bahsetmiştik. Karmaşa matriksinde bu değerlerin temsil ettiği durumlar şu şekildedir:

Bir takım basit matematiksel formüllerle bu değer oranlarına bakılarak veri seti üzerinde oluşturulan modellerin güvenilirliği incelenebilir.

$$
Doğruluk (Accuracy) = \frac{TP + TN}{N}
$$
Doğruları ve yanlışları ne kadar yüksek oranda belirleyebilirsek, modelimizin doğruluk payı o kadar yüksektir.

$$
Hata Oranı (Error Rate) = \frac{FN + FP}{N}
$$


$$
Hata Oranı (Error Rate) = 1 - Doğruluk (Accuracy)
$$
Elimizdeki gerçek değerlerin ne kadarını doğru tahmin etmişiz?

$$
DoğruPozitifOranı = \frac{TP}{FN + TP}
$$

Elimizdeki gerçek değerlerin ne kadarını yanlış tahmin etmişiz?

$$
Yanlış Pozitif Oranı = \frac{FP}{TN + FP}
$$

Peki yaptığımız tahminlerin ne kadarı doğru?

$$
Hassasiyet (Precision) = \frac{TP}{TP + FP}
$$

Peki bu öğrendiklerimizi neye ölçekleyebiliriz?

Yeni bir hastalık tanı kiti oluşturduğumuzu düşünelim ve bu kitin performansını test etmek istiyoruz.

Sizce ne yapabiliriz? İlk olarak hasta ve sağlıklı olduklarından emin olduğumuz bir grup kişi ile çalışmaya başlayabiliriz. Sonra bu kişilerden alınan örnekleri geliştirdiğimiz kit ile test ederek bir tahmin elde edebiliriz.

Elde edeceğimiz sonuç ya hasta ya da sağlıklı olacaktır. 

Amacımız sizce ne olabilir? Mantık olarak; gerçekten hasta olan kişileri hasta olarak, gerçekten sağlıklı olan kişileri de sağlıklı olarak tahmin edebiliyorsak kitimiz doğru çalışıyor demektir. Modelmizin ya da test kitimizin *Doğruluk* değer ne kadar yüksekse o kadar iyi çalışan bir kitimiz var demektir.

