# Bilimsel Hikaye Anlatımı 1

Bu noktaya kadar R üzerinde veri tiplerini, vektörleri, listeler ve veri çerçevelerini öğrendik. Hatta bilgisayardaki verileri okuduk. Bu sayede basit vektörel işlemler yaptık. Mesela boyu belirli bir değerden büyük olan kişileri seçtik. Ya da boy ve kilo değişkenlerini kullanarak vücut kütle endeksi bile hesapladık. Peki bundan sonra ne olacak?

Veri analizi aslında bilimsel bir hikaye anlatıcılığıdır. Nasıl bir hikaye anlatıcısı üslubuyla, benzetmeleriyle, kelime oyunlarıyla bize bir öykü anlatıyorsa; biz de tablolarımızla, grafiklerimizle ve istatsisitk bilgimizle okuyuculara bilimsel bir öykü anlatıyoruz. Bu öykü anlatıcılığındaki ilk adım ise elimizdeki verinin ne olduğunu tanımlamak. İşte bunu tanımlayıcı istatistik olarak isimlendiriyoruz.

Öncelikle R üzerinde gelen öntanımlı `iris` veri setini kullanarak işe başlayalım. 

Bu veri çerçevesinin sütun isimlerini elde edelim:

```{r}
colnames(iris)
```

Bu veri seti, iris biktisinin üç farklı türüne ait sepal uzunluğu, sepal genişliği, petal uzunluğu, petal genişliği ve tür isimleri gibi farklı değişkenleri barındıryor.

Bu adımdan sonra kullanacağımız ilk fonksiyon `summary` olacak. Bir dosya okuduktan sonra her zaman bu fonksiyonla elde ettiğiniz veri çerçevesini özetlemenizi tavsiye ederim. Bu sayede elinizdeki verinin içeriğini öğrenmiş olacaksınız:

```{r}
summary(iris)
```

Bu komut sonucunda, her sütuna ait farklı istatistik bilgiler elde ettik.

Peki bundan sonra ne olacak? Bu verilerle ne yapabiliriz?

1. Kaç tane var?
2. Neredeler?
3. Dağılımları nasıl? (*homojen* veya *heterojen*)

Sıra sıra gidelim...

## Tanımlayıcı istatistikler

Tanımlayıcı istatistikler, genel olarak bir verideye üstten bir bakış atmamızı sağlar. Aslında bu veri içerisindeki ilişkileri, çıkarımsal olmayan bir şekilde görselleştirmeyi hedefliyoruz.

Veri çerçevesinde kaç eleman var?

```{r}
dim(iris)
nrow(iris)
ncol(iris)
```

Ya da vektörlerin boyutlarını hesaplayabiliriz:

```{r}
length(iris$Sepal.Length)
```

### Frekans tabloları

Mesela bu veri çerçevesindeki tür isimleri için frekans tablosu oluşturalım. Bunun için `table` fonksiyonunu kullanacağız:

```{r}
table(iris$Species)
```

Peki şimdi rakam vektörlerinde kullanalım:

```{r}
table(iris$Sepal.Length)
```

Sanırım bu fonkisyon rakam vektörleri için kullanışlı değil. Rakam vektörleri için ayrı bir sistem gerek. Peki bu vektörü nasıl ifade edebiliriz?

## Ortalama, ortanca ve dağılım

İlk seçeneğimiz *aritmetik ortalama* hesaplamak:

```{r}
mean(iris$Sepal.Length)
```

İkinci seçeneğimiz *ortanca* değeri hesaplamak:

```{r}
median(iris$Sepal.Length)
```

Ortanca ve ortalama iki farklı istatistik aslında. Aritmetik ortalama, örneklem boyutuna bağlıdır. Bir $x$ vektörünün aritmetik ortalaması ($\overline{x} $), aşağıdaki gibi hesaplanabilir:

$$
\overline{x} = \frac{\sum_{i=i}^{n} x_{i}}{n} 
$$

Ortanca değer ise bir vektörü küçükten büyüğe doğru sıraladığınzda, en ortada elde edilen değerdir. Elemanların yarısı bu değerin altında, diğer yarısı ise bu değerin üzerinde bulunur.

Peki verimizin sınırları ne? Bunun için tekrar `summary` fonksiyonuna bakalım:

```{r}
summary(iris$Sepal.Length)
```

Elde ettiğimiz ilk değer, en küçük elemanı gösteriyor. En sonraki değer ise en büyük elemanı. Aynı zamanda bu şekilde de hesaplayabiliriz:

```{r}
min(iris$Sepal.Length)
max(iris$Sepal.Length)
```

Aynı zamanda ortanca (median) ve aritmetik ortalama (mean) değerleri de hesaplanmış. Peki 1st Qu. ve 3rd Qu. nedir?

Bu değerler *çeyreklik* olarak isimlendirilir. Elimizdeki veriyi, her bir parça toplam rakamların %25'ini içerecek şekilde 4 parçaya böldüğümüzde, elde ettiğimiz her bölge çeyreklik olarak isimlendirilir. Bu değerleri daha iyi anlamak için `quantile` fonksiyonunu kullanalım:

```{r}
quantile(iris$Sepal.Length)
```

0% aslında en küçük değeri, 100% ise en büyük değeri gösteriyor. 4.3' e kadar ilk çeyreklik kısım, 5.1'ye kadar ikinci çeyreklik, 6.4'e kadar üçüncü çeyreklik ve 7.9'ya kadar ise son çeyreklik kısım bulunur. İsterseniz rakamları sıralamamızı sağlayan `sort` fonksiyonu ile daha rahat görebiliriz:

```{r}
sort(iris$Sepal.Length)
```

Tam olmasa da yaklaşık olarak eşit sayıda gruplar olduğu görülmekte. 

Son olarak `cut` isimli fonksiyonlar benzer bir çalışma yapabiliriz. Bu fonksiyon, elimizdeki bir rakam vektörünü, istediğimiz aralıklarla bölmemizi sağlar. Mesela `Sepal.Length` vektörünü, en küçük elemanı koruyacak şekilde 4 parçaya ayıralım:

```{r}
cut(iris$Sepal.Length, 4, include.lowest = TRUE)
```

Bu işlem, vektörü 4 parçaya böldü ve her elemanı bir gruba dahil eden bir faktör vektörü geri döndürdü. Şimdi ise `quantile` fonksiyonunun çıktısını, kesim noktaları olarak tanımlayalım:

```{r}
cut(iris$Sepal.Length, quantile(iris$Sepal.Length), include.lowest = TRUE)
```

Son olarak elde ettiğimiz faktör vektörünün frekans tablosunu elde edelim:

```{r}
table(cut(iris$Sepal.Length, quantile(iris$Sepal.Length), include.lowest = TRUE))
```

Yaklaşık olarak eşit gruplar elde ettik. Sonuç olarak verimizin dağılımı bu şekilde:

## Hatta grafiğini yapalım!

R bize aynı zamanda bu dağılımı görselleştirme imkanı da sunuyor. Mesela **kutu grafikleri** (`boxplot`) elimizdeki verinin dağılımını gösteren yegane görselleştirme metodudur. Burada `boxplot` fonksiyonu ile birlikte bir rakam vektörü kullanmamız gerektiğine dikkat edin lütfen. Yani sadece **sürekli (continious)**  veri tipleriyle işlem yapabiliriz. Faktör gibi **kategori (disecrete)** veri tipleri tek başlarına kullanılamaz.

Burada kullandığımız `outline` opsiyonu, outlier değerlerin gösterilmemesi gerektiğini belirtmektedir.

```{r}
boxplot(iris$Sepal.Length, outline = FALSE)
```

Kutu grafikleri, sürekli veri tiplerinin dağılımını görselleştirir;
- Ortadaki kalın çizgi bize ortanca değeri gösterir, 
- En aşağıdaki çizgi ise minimum değeri,
- Kesikli çizgi birinci çeyreklik kısmı,
- Kutu içerisinde ikinci ve üçüncü çeyreklik kısımlar ortanca değer ile ayrılır,
- En üstteki değerle kutunun arasındaki kesikli çizgi ise dördüncü çeyrekliği gösterir.

```{r}
summary(iris$Sepal.Length)
```

En küçük değer 4.3, en büyük ise 7.9 oluyor. İstersek petal uzunlukları için de aynısını gerçekleştirebiliriz.

```{r}
boxplot(iris$Petal.Length)
```

### Bağlantıları kurmak: Hikaye anlatımı

Peki Sepal Uzunluğunun Türler ile olan ilişkisi nasıldır?

```{r}
boxplot(iris$Sepal.Length~iris$Species)
```

Burada `~` işareti (sağ alt tuşu + ü), **soldaki değeri, sağdaki değere göre ifade et** şeklinde özetlenebilir. Aslında bir değişkeni, başka bir değişken kullanarak modelliyoruz. Bu konuya ilerleyen derslerde geleceğiz.

:::{.callout-note}
## Soru

Acaba bu grafikte ne dikkatinizi çekti? Derse 5 dakika ara veriniz ve sohbet kısmından yorumlarınızı yazınız.

:::

## `ggplot2`: İleri seviye görselleştirme

Buraya kadar normal R grafiklerini gördük. Ancak R üzerinde başka görselleştirme kütüphaneleri de mevcuttur. Bunlardan bir tanesi de `ggplot2`.

Bu kütüphaneyi kullanmak için öncelikle, R içerisine yükleme yapmalyız:

```{r eval = FALSE}
install.packages("ggplot2")
```

Şimdi yüklediğimiz kütüphaneyi, R içerisine aktaralım:

```{r}
library(ggplot2)
```

Kutu grafiğini yapalım:

```{r}
ggplot(data = iris, aes(x = Sepal.Length, y = Species)) + geom_boxplot()
```

Haftaya daha ayrıntılı işleyeceğiz!